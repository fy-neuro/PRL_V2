##packages
```{r}
library(WGCNA)
library(hdWGCNA)
library(tidyverse)
library(cowplot)
library(patchwork)
library(qs)
library(Seurat)
```

##load data
```{r}
set.seed(12345)
enableWGCNAThreads(nThreads = 8)

seurat_obj <- readRDS("hdWGCNA_objcet.rds")
```
##setup
```{r}
seurat_obj <- SetupForWGCNA(
  sobj,
  gene_select = "fraction", # variable(高变基因),custom(自定义)
  fraction = 0.05, # fraction of cells that a gene needs to be expressed in order to be included
  wgcna_name = "tutorial" # the name of the hdWGCNA experiment
)
```
##Metacell
```{r}
# 各组构建metacell
seurat_obj <- MetacellsByGroups(
  seurat_obj = seurat_obj,
  group.by = c("subclass", "Group"), #指定seurat_obj@meta.data中要分组的列
  reduction = 'integrated.MNN', # 选择要执行KNN的降维
  k = 25, # 最近邻居参数
  max_shared = 10, # 两个metacell之间共享细胞的最大数目
  ident.group = 'subclass' # 设置metacell安全对象的标识
)

# normalize metacell expression matrix:
seurat_obj <- NormalizeMetacells(seurat_obj)
```

##set Group
```{r}
group_name <- unique(seurat_obj@meta.data$subclass)
##remove Tcells
group_name <- group_name[1:17]
```

##form DatExpr
```{r}
seurat_obj <- SetDatExpr(
  seurat_obj,
  group_name = group_name, # the name of the group of interest in the group.by column
  group.by='subclass', # the metadata column containing the cell type info. This same column should have also been used in MetacellsByGroups
  assay = 'RNA', # using RNA assay
  slot = 'data' # using normalized data
)

# # 选择多个group_names
# seurat_obj <- SetDatExpr(
#   seurat_obj,
#   group_name = c("Fibroblasts", "B-cells"),
#   group.by='celltype'
# )
```
##soft power
```{r}
# Test different soft powers:
seurat_obj <- TestSoftPowers(
  seurat_obj,
  networkType = 'unsigned' # you can also use "signed" or "signed hybrid"
)

# plot the results:
plot_list <- PlotSoftPowers(seurat_obj)

# assemble with patchwork
wrap_plots(plot_list, ncol=2)

# check以下数据
power_table <- GetPowerTable(seurat_obj)
head(power_table)

```
##Constructnetwork
```{r}
# 如果没有指定软阈值，construcNetwork会自动指定软阈值
# construct co-expression network:
seurat_obj <- ConstructNetwork(
  seurat_obj,
  tom_name = 'TOTAL', # name of the topoligical overlap matrix written to disk
  overwrite_tom = TRUE # 允许覆盖已存在的同名文件
)


Dendrogram<-PlotDendrogram(seurat_obj, main=' hdWGCNA Dendrogram')

Cairo::CairoPNG(filename = "Dendrogram.png",width = 5000,height = 3000,dpi = 800)
PlotDendrogram(seurat_obj, main=' hdWGCNA Dendrogram')
dev.off()
ggsave(filename = "../plot/PlotDendrogram.pdf")
# 可选：检查topoligcal重叠矩阵(TOM)
# TOM <- GetTOM(seurat_obj)
# TOM
```
##ModuleEigengenes
```{r}
# need to run ScaleData first or else harmony throws an error:
#seurat_obj <- ScaleData(seurat_obj, features=VariableFeatures(seurat_obj))

# compute all MEs in the full single-cell dataset
seurat_obj <- ModuleEigengenes(
 seurat_obj,
 group.by.vars="Group"
)

# harmonized module eigengenes:
# allow the user to apply Harmony batch correction to the MEs, yielding harmonized module eigengenes (hMEs)
hMEs <- GetMEs(seurat_obj)

# module eigengenes:
#MEs <- GetMEs(seurat_obj, harmonized=FALSE)
```

```{r}
module <- seurat_obj@misc$tutorial$wgcna_modules
subset_module <- subset(module, color != "grey")

color_counts <- table(subset_module[[c('color')]])
sorted_color <- names(sort(color_counts, decreasing = TRUE))
color_counts_df <- as.data.frame(table(subset_module$color))
sorted_df <- subset_module %>%
  left_join(color_counts_df, by = c("color" = "Var1")) %>%
  arrange(desc(Freq))%>%
  select(-Freq)

# get hMEs from seurat object
MEs <- GetMEs(seurat_obj)
modules <- GetModules(seurat_obj)
mods <- levels(modules$module); mods <- mods[mods != 'grey']

# add hMEs to Seurat meta-data:
seurat_obj@meta.data <- cbind(seurat_obj@meta.data, MEs)



names(sorted_df)[names(sorted_df) == "gene_name"] <- "gene"
dir.create("../Documents")
split_df <- split(sorted_df,sorted_df$color)
saveRDS(split_df, file = '../Documents/wgcna.rds')
saveRDS(color_counts_df, file = '../Documents/color_count.rds')

cut_sorted <- subset(sorted_df, select = c('gene','module'))
saveRDS(cut_sorted, file = '../Documents/gene_list.rds')
```


```{r}
# compute eigengene-based connectivity (kME):
# focus on the “hub genes”
seurat_obj <- ModuleConnectivity(
  seurat_obj,
  group.by = 'subclass', 
  group_name = group_name
)

# rename the modules
seurat_obj <- ResetModuleNames(
  seurat_obj,
  new_name = "Modules"
)

# plot genes ranked by kME for each module
p <- PlotKMEs(seurat_obj, ncol=5)
p
ggsave("../plot/PCgenes.pdf",width = 24,height =8)
```
```{r}
# get the module assignment table:
modules <- GetModules(seurat_obj) %>% 
  subset(module != 'grey')

# show the first 6 columns:
head(modules[,1:6])

# get hub genes
hub_df <- GetHubGenes(seurat_obj, n_hubs = 10)
head(hub_df)
```

```{r}
# compute gene scoring for the top 25 hub genes by kME for each module
# with UCell method
library(UCell)
seurat_obj <- ModuleExprScore(
  seurat_obj,
  n_genes = 25,
  method='UCell' # Seurat方法(AddModuleScore)
)
```

##save data
```{r}
# 保存数据
qsave(seurat_obj, 'hdWGCNA_object.qs')
saveRDS(seurat_obj,"hdWGCNA_objcet.rds")
```

